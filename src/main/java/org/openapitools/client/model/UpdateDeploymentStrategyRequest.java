/*
 * Amazon AppConfig
 * <p>Use AppConfig, a capability of Amazon Web Services Systems Manager, to create, manage, and quickly deploy application configurations. AppConfig supports controlled deployments to applications of any size and includes built-in validation checks and monitoring. You can use AppConfig with applications hosted on Amazon EC2 instances, Lambda, containers, mobile applications, or IoT devices.</p> <p>To prevent errors when deploying application configurations, especially for production systems where a simple typo could cause an unexpected outage, AppConfig includes validators. A validator provides a syntactic or semantic check to ensure that the configuration you want to deploy works as intended. To validate your application configuration data, you provide a schema or an Amazon Web Services Lambda function that runs against the configuration. The configuration deployment or update can only proceed when the configuration data is valid.</p> <p>During a configuration deployment, AppConfig monitors the application to ensure that the deployment is successful. If the system encounters an error, AppConfig rolls back the change to minimize impact for your application users. You can configure a deployment strategy for each application or environment that includes deployment criteria, including velocity, bake time, and alarms to monitor. Similar to error monitoring, if a deployment triggers an alarm, AppConfig automatically rolls back to the previous version. </p> <p>AppConfig supports multiple use cases. Here are some examples:</p> <ul> <li> <p> <b>Feature flags</b>: Use AppConfig to turn on new features that require a timely deployment, such as a product launch or announcement. </p> </li> <li> <p> <b>Application tuning</b>: Use AppConfig to carefully introduce changes to your application that can only be tested with production traffic.</p> </li> <li> <p> <b>Allow list</b>: Use AppConfig to allow premium subscribers to access paid content. </p> </li> <li> <p> <b>Operational issues</b>: Use AppConfig to reduce stress on your application when a dependency or other external factor impacts the system.</p> </li> </ul> <p>This reference is intended to be used with the <a href=\"http://docs.aws.amazon.com/appconfig/latest/userguide/what-is-appconfig.html\">AppConfig User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2019-10-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateDeploymentStrategyRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T13:42:19.346859+05:30[Asia/Kolkata]", comments = "Generator version: 7.10.0")
public class UpdateDeploymentStrategyRequest {
  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  @javax.annotation.Nullable
  private String description;

  public static final String SERIALIZED_NAME_DEPLOYMENT_DURATION_IN_MINUTES = "DeploymentDurationInMinutes";
  @SerializedName(SERIALIZED_NAME_DEPLOYMENT_DURATION_IN_MINUTES)
  @javax.annotation.Nullable
  private Integer deploymentDurationInMinutes;

  public static final String SERIALIZED_NAME_FINAL_BAKE_TIME_IN_MINUTES = "FinalBakeTimeInMinutes";
  @SerializedName(SERIALIZED_NAME_FINAL_BAKE_TIME_IN_MINUTES)
  @javax.annotation.Nullable
  private Integer finalBakeTimeInMinutes;

  public static final String SERIALIZED_NAME_GROWTH_FACTOR = "GrowthFactor";
  @SerializedName(SERIALIZED_NAME_GROWTH_FACTOR)
  @javax.annotation.Nullable
  private Float growthFactor;

  /**
   * &lt;p&gt;The algorithm used to define how percentage grows over time. AppConfig supports the following growth types:&lt;/p&gt; &lt;p&gt; &lt;b&gt;Linear&lt;/b&gt;: For this type, AppConfig processes the deployment by increments of the growth factor evenly distributed over the deployment time. For example, a linear deployment that uses a growth factor of 20 initially makes the configuration available to 20 percent of the targets. After 1/5th of the deployment time has passed, the system updates the percentage to 40 percent. This continues until 100% of the targets are set to receive the deployed configuration.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Exponential&lt;/b&gt;: For this type, AppConfig processes the deployment exponentially using the following formula: &lt;code&gt;G*(2^N)&lt;/code&gt;. In this formula, &lt;code&gt;G&lt;/code&gt; is the growth factor specified by the user and &lt;code&gt;N&lt;/code&gt; is the number of steps until the configuration is deployed to all targets. For example, if you specify a growth factor of 2, then the system rolls out the configuration as follows:&lt;/p&gt; &lt;p&gt; &lt;code&gt;2*(2^0)&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;code&gt;2*(2^1)&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;code&gt;2*(2^2)&lt;/code&gt; &lt;/p&gt; &lt;p&gt;Expressed numerically, the deployment rolls out as follows: 2% of the targets, 4% of the targets, 8% of the targets, and continues until the configuration has been deployed to all targets.&lt;/p&gt;
   */
  @JsonAdapter(GrowthTypeEnum.Adapter.class)
  public enum GrowthTypeEnum {
    LINEAR("LINEAR"),
    
    EXPONENTIAL("EXPONENTIAL");

    private String value;

    GrowthTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static GrowthTypeEnum fromValue(String value) {
      for (GrowthTypeEnum b : GrowthTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<GrowthTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final GrowthTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public GrowthTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return GrowthTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      GrowthTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_GROWTH_TYPE = "GrowthType";
  @SerializedName(SERIALIZED_NAME_GROWTH_TYPE)
  @javax.annotation.Nullable
  private GrowthTypeEnum growthType;

  public UpdateDeploymentStrategyRequest() {
  }

  public UpdateDeploymentStrategyRequest description(@javax.annotation.Nullable String description) {
    this.description = description;
    return this;
  }

  /**
   * A description of the deployment strategy.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(@javax.annotation.Nullable String description) {
    this.description = description;
  }


  public UpdateDeploymentStrategyRequest deploymentDurationInMinutes(@javax.annotation.Nullable Integer deploymentDurationInMinutes) {
    this.deploymentDurationInMinutes = deploymentDurationInMinutes;
    return this;
  }

  /**
   * Total amount of time for a deployment to last.
   * minimum: 0
   * maximum: 1440
   * @return deploymentDurationInMinutes
   */
  @javax.annotation.Nullable
  public Integer getDeploymentDurationInMinutes() {
    return deploymentDurationInMinutes;
  }

  public void setDeploymentDurationInMinutes(@javax.annotation.Nullable Integer deploymentDurationInMinutes) {
    this.deploymentDurationInMinutes = deploymentDurationInMinutes;
  }


  public UpdateDeploymentStrategyRequest finalBakeTimeInMinutes(@javax.annotation.Nullable Integer finalBakeTimeInMinutes) {
    this.finalBakeTimeInMinutes = finalBakeTimeInMinutes;
    return this;
  }

  /**
   * The amount of time that AppConfig monitors for alarms before considering the deployment to be complete and no longer eligible for automatic rollback.
   * minimum: 0
   * maximum: 1440
   * @return finalBakeTimeInMinutes
   */
  @javax.annotation.Nullable
  public Integer getFinalBakeTimeInMinutes() {
    return finalBakeTimeInMinutes;
  }

  public void setFinalBakeTimeInMinutes(@javax.annotation.Nullable Integer finalBakeTimeInMinutes) {
    this.finalBakeTimeInMinutes = finalBakeTimeInMinutes;
  }


  public UpdateDeploymentStrategyRequest growthFactor(@javax.annotation.Nullable Float growthFactor) {
    this.growthFactor = growthFactor;
    return this;
  }

  /**
   * The percentage of targets to receive a deployed configuration during each interval.
   * minimum: 1
   * maximum: 100
   * @return growthFactor
   */
  @javax.annotation.Nullable
  public Float getGrowthFactor() {
    return growthFactor;
  }

  public void setGrowthFactor(@javax.annotation.Nullable Float growthFactor) {
    this.growthFactor = growthFactor;
  }


  public UpdateDeploymentStrategyRequest growthType(@javax.annotation.Nullable GrowthTypeEnum growthType) {
    this.growthType = growthType;
    return this;
  }

  /**
   * &lt;p&gt;The algorithm used to define how percentage grows over time. AppConfig supports the following growth types:&lt;/p&gt; &lt;p&gt; &lt;b&gt;Linear&lt;/b&gt;: For this type, AppConfig processes the deployment by increments of the growth factor evenly distributed over the deployment time. For example, a linear deployment that uses a growth factor of 20 initially makes the configuration available to 20 percent of the targets. After 1/5th of the deployment time has passed, the system updates the percentage to 40 percent. This continues until 100% of the targets are set to receive the deployed configuration.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Exponential&lt;/b&gt;: For this type, AppConfig processes the deployment exponentially using the following formula: &lt;code&gt;G*(2^N)&lt;/code&gt;. In this formula, &lt;code&gt;G&lt;/code&gt; is the growth factor specified by the user and &lt;code&gt;N&lt;/code&gt; is the number of steps until the configuration is deployed to all targets. For example, if you specify a growth factor of 2, then the system rolls out the configuration as follows:&lt;/p&gt; &lt;p&gt; &lt;code&gt;2*(2^0)&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;code&gt;2*(2^1)&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;code&gt;2*(2^2)&lt;/code&gt; &lt;/p&gt; &lt;p&gt;Expressed numerically, the deployment rolls out as follows: 2% of the targets, 4% of the targets, 8% of the targets, and continues until the configuration has been deployed to all targets.&lt;/p&gt;
   * @return growthType
   */
  @javax.annotation.Nullable
  public GrowthTypeEnum getGrowthType() {
    return growthType;
  }

  public void setGrowthType(@javax.annotation.Nullable GrowthTypeEnum growthType) {
    this.growthType = growthType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateDeploymentStrategyRequest updateDeploymentStrategyRequest = (UpdateDeploymentStrategyRequest) o;
    return Objects.equals(this.description, updateDeploymentStrategyRequest.description) &&
        Objects.equals(this.deploymentDurationInMinutes, updateDeploymentStrategyRequest.deploymentDurationInMinutes) &&
        Objects.equals(this.finalBakeTimeInMinutes, updateDeploymentStrategyRequest.finalBakeTimeInMinutes) &&
        Objects.equals(this.growthFactor, updateDeploymentStrategyRequest.growthFactor) &&
        Objects.equals(this.growthType, updateDeploymentStrategyRequest.growthType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, deploymentDurationInMinutes, finalBakeTimeInMinutes, growthFactor, growthType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateDeploymentStrategyRequest {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    deploymentDurationInMinutes: ").append(toIndentedString(deploymentDurationInMinutes)).append("\n");
    sb.append("    finalBakeTimeInMinutes: ").append(toIndentedString(finalBakeTimeInMinutes)).append("\n");
    sb.append("    growthFactor: ").append(toIndentedString(growthFactor)).append("\n");
    sb.append("    growthType: ").append(toIndentedString(growthType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Description");
    openapiFields.add("DeploymentDurationInMinutes");
    openapiFields.add("FinalBakeTimeInMinutes");
    openapiFields.add("GrowthFactor");
    openapiFields.add("GrowthType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateDeploymentStrategyRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateDeploymentStrategyRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateDeploymentStrategyRequest is not found in the empty JSON string", UpdateDeploymentStrategyRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateDeploymentStrategyRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateDeploymentStrategyRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) && !jsonObj.get("Description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Description").toString()));
      }
      if ((jsonObj.get("GrowthType") != null && !jsonObj.get("GrowthType").isJsonNull()) && !jsonObj.get("GrowthType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `GrowthType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("GrowthType").toString()));
      }
      // validate the optional field `GrowthType`
      if (jsonObj.get("GrowthType") != null && !jsonObj.get("GrowthType").isJsonNull()) {
        GrowthTypeEnum.validateJsonElement(jsonObj.get("GrowthType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateDeploymentStrategyRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateDeploymentStrategyRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateDeploymentStrategyRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateDeploymentStrategyRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateDeploymentStrategyRequest>() {
           @Override
           public void write(JsonWriter out, UpdateDeploymentStrategyRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateDeploymentStrategyRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateDeploymentStrategyRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateDeploymentStrategyRequest
   * @throws IOException if the JSON string is invalid with respect to UpdateDeploymentStrategyRequest
   */
  public static UpdateDeploymentStrategyRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateDeploymentStrategyRequest.class);
  }

  /**
   * Convert an instance of UpdateDeploymentStrategyRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

