/*
 * Amazon AppConfig
 * <p>Use AppConfig, a capability of Amazon Web Services Systems Manager, to create, manage, and quickly deploy application configurations. AppConfig supports controlled deployments to applications of any size and includes built-in validation checks and monitoring. You can use AppConfig with applications hosted on Amazon EC2 instances, Lambda, containers, mobile applications, or IoT devices.</p> <p>To prevent errors when deploying application configurations, especially for production systems where a simple typo could cause an unexpected outage, AppConfig includes validators. A validator provides a syntactic or semantic check to ensure that the configuration you want to deploy works as intended. To validate your application configuration data, you provide a schema or an Amazon Web Services Lambda function that runs against the configuration. The configuration deployment or update can only proceed when the configuration data is valid.</p> <p>During a configuration deployment, AppConfig monitors the application to ensure that the deployment is successful. If the system encounters an error, AppConfig rolls back the change to minimize impact for your application users. You can configure a deployment strategy for each application or environment that includes deployment criteria, including velocity, bake time, and alarms to monitor. Similar to error monitoring, if a deployment triggers an alarm, AppConfig automatically rolls back to the previous version. </p> <p>AppConfig supports multiple use cases. Here are some examples:</p> <ul> <li> <p> <b>Feature flags</b>: Use AppConfig to turn on new features that require a timely deployment, such as a product launch or announcement. </p> </li> <li> <p> <b>Application tuning</b>: Use AppConfig to carefully introduce changes to your application that can only be tested with production traffic.</p> </li> <li> <p> <b>Allow list</b>: Use AppConfig to allow premium subscribers to access paid content. </p> </li> <li> <p> <b>Operational issues</b>: Use AppConfig to reduce stress on your application when a dependency or other external factor impacts the system.</p> </li> </ul> <p>This reference is intended to be used with the <a href=\"http://docs.aws.amazon.com/appconfig/latest/userguide/what-is-appconfig.html\">AppConfig User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2019-10-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.DeploymentState;
import org.openapitools.client.model.GrowthType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information about the deployment.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T13:42:19.346859+05:30[Asia/Kolkata]", comments = "Generator version: 7.10.0")
public class DeploymentSummary {
  public static final String SERIALIZED_NAME_DEPLOYMENT_NUMBER = "DeploymentNumber";
  @SerializedName(SERIALIZED_NAME_DEPLOYMENT_NUMBER)
  @javax.annotation.Nullable
  private Integer deploymentNumber;

  public static final String SERIALIZED_NAME_CONFIGURATION_NAME = "ConfigurationName";
  @SerializedName(SERIALIZED_NAME_CONFIGURATION_NAME)
  @javax.annotation.Nullable
  private String configurationName;

  public static final String SERIALIZED_NAME_CONFIGURATION_VERSION = "ConfigurationVersion";
  @SerializedName(SERIALIZED_NAME_CONFIGURATION_VERSION)
  @javax.annotation.Nullable
  private String configurationVersion;

  public static final String SERIALIZED_NAME_DEPLOYMENT_DURATION_IN_MINUTES = "DeploymentDurationInMinutes";
  @SerializedName(SERIALIZED_NAME_DEPLOYMENT_DURATION_IN_MINUTES)
  @javax.annotation.Nullable
  private Integer deploymentDurationInMinutes;

  public static final String SERIALIZED_NAME_GROWTH_TYPE = "GrowthType";
  @SerializedName(SERIALIZED_NAME_GROWTH_TYPE)
  @javax.annotation.Nullable
  private GrowthType growthType;

  public static final String SERIALIZED_NAME_GROWTH_FACTOR = "GrowthFactor";
  @SerializedName(SERIALIZED_NAME_GROWTH_FACTOR)
  @javax.annotation.Nullable
  private Float growthFactor;

  public static final String SERIALIZED_NAME_FINAL_BAKE_TIME_IN_MINUTES = "FinalBakeTimeInMinutes";
  @SerializedName(SERIALIZED_NAME_FINAL_BAKE_TIME_IN_MINUTES)
  @javax.annotation.Nullable
  private Integer finalBakeTimeInMinutes;

  public static final String SERIALIZED_NAME_STATE = "State";
  @SerializedName(SERIALIZED_NAME_STATE)
  @javax.annotation.Nullable
  private DeploymentState state;

  public static final String SERIALIZED_NAME_PERCENTAGE_COMPLETE = "PercentageComplete";
  @SerializedName(SERIALIZED_NAME_PERCENTAGE_COMPLETE)
  @javax.annotation.Nullable
  private Float percentageComplete;

  public static final String SERIALIZED_NAME_STARTED_AT = "StartedAt";
  @SerializedName(SERIALIZED_NAME_STARTED_AT)
  @javax.annotation.Nullable
  private OffsetDateTime startedAt;

  public static final String SERIALIZED_NAME_COMPLETED_AT = "CompletedAt";
  @SerializedName(SERIALIZED_NAME_COMPLETED_AT)
  @javax.annotation.Nullable
  private OffsetDateTime completedAt;

  public DeploymentSummary() {
  }

  public DeploymentSummary deploymentNumber(@javax.annotation.Nullable Integer deploymentNumber) {
    this.deploymentNumber = deploymentNumber;
    return this;
  }

  /**
   * Get deploymentNumber
   * @return deploymentNumber
   */
  @javax.annotation.Nullable
  public Integer getDeploymentNumber() {
    return deploymentNumber;
  }

  public void setDeploymentNumber(@javax.annotation.Nullable Integer deploymentNumber) {
    this.deploymentNumber = deploymentNumber;
  }


  public DeploymentSummary configurationName(@javax.annotation.Nullable String configurationName) {
    this.configurationName = configurationName;
    return this;
  }

  /**
   * Get configurationName
   * @return configurationName
   */
  @javax.annotation.Nullable
  public String getConfigurationName() {
    return configurationName;
  }

  public void setConfigurationName(@javax.annotation.Nullable String configurationName) {
    this.configurationName = configurationName;
  }


  public DeploymentSummary configurationVersion(@javax.annotation.Nullable String configurationVersion) {
    this.configurationVersion = configurationVersion;
    return this;
  }

  /**
   * Get configurationVersion
   * @return configurationVersion
   */
  @javax.annotation.Nullable
  public String getConfigurationVersion() {
    return configurationVersion;
  }

  public void setConfigurationVersion(@javax.annotation.Nullable String configurationVersion) {
    this.configurationVersion = configurationVersion;
  }


  public DeploymentSummary deploymentDurationInMinutes(@javax.annotation.Nullable Integer deploymentDurationInMinutes) {
    this.deploymentDurationInMinutes = deploymentDurationInMinutes;
    return this;
  }

  /**
   * Get deploymentDurationInMinutes
   * @return deploymentDurationInMinutes
   */
  @javax.annotation.Nullable
  public Integer getDeploymentDurationInMinutes() {
    return deploymentDurationInMinutes;
  }

  public void setDeploymentDurationInMinutes(@javax.annotation.Nullable Integer deploymentDurationInMinutes) {
    this.deploymentDurationInMinutes = deploymentDurationInMinutes;
  }


  public DeploymentSummary growthType(@javax.annotation.Nullable GrowthType growthType) {
    this.growthType = growthType;
    return this;
  }

  /**
   * Get growthType
   * @return growthType
   */
  @javax.annotation.Nullable
  public GrowthType getGrowthType() {
    return growthType;
  }

  public void setGrowthType(@javax.annotation.Nullable GrowthType growthType) {
    this.growthType = growthType;
  }


  public DeploymentSummary growthFactor(@javax.annotation.Nullable Float growthFactor) {
    this.growthFactor = growthFactor;
    return this;
  }

  /**
   * Get growthFactor
   * @return growthFactor
   */
  @javax.annotation.Nullable
  public Float getGrowthFactor() {
    return growthFactor;
  }

  public void setGrowthFactor(@javax.annotation.Nullable Float growthFactor) {
    this.growthFactor = growthFactor;
  }


  public DeploymentSummary finalBakeTimeInMinutes(@javax.annotation.Nullable Integer finalBakeTimeInMinutes) {
    this.finalBakeTimeInMinutes = finalBakeTimeInMinutes;
    return this;
  }

  /**
   * Get finalBakeTimeInMinutes
   * @return finalBakeTimeInMinutes
   */
  @javax.annotation.Nullable
  public Integer getFinalBakeTimeInMinutes() {
    return finalBakeTimeInMinutes;
  }

  public void setFinalBakeTimeInMinutes(@javax.annotation.Nullable Integer finalBakeTimeInMinutes) {
    this.finalBakeTimeInMinutes = finalBakeTimeInMinutes;
  }


  public DeploymentSummary state(@javax.annotation.Nullable DeploymentState state) {
    this.state = state;
    return this;
  }

  /**
   * Get state
   * @return state
   */
  @javax.annotation.Nullable
  public DeploymentState getState() {
    return state;
  }

  public void setState(@javax.annotation.Nullable DeploymentState state) {
    this.state = state;
  }


  public DeploymentSummary percentageComplete(@javax.annotation.Nullable Float percentageComplete) {
    this.percentageComplete = percentageComplete;
    return this;
  }

  /**
   * Get percentageComplete
   * @return percentageComplete
   */
  @javax.annotation.Nullable
  public Float getPercentageComplete() {
    return percentageComplete;
  }

  public void setPercentageComplete(@javax.annotation.Nullable Float percentageComplete) {
    this.percentageComplete = percentageComplete;
  }


  public DeploymentSummary startedAt(@javax.annotation.Nullable OffsetDateTime startedAt) {
    this.startedAt = startedAt;
    return this;
  }

  /**
   * Get startedAt
   * @return startedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartedAt() {
    return startedAt;
  }

  public void setStartedAt(@javax.annotation.Nullable OffsetDateTime startedAt) {
    this.startedAt = startedAt;
  }


  public DeploymentSummary completedAt(@javax.annotation.Nullable OffsetDateTime completedAt) {
    this.completedAt = completedAt;
    return this;
  }

  /**
   * Get completedAt
   * @return completedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCompletedAt() {
    return completedAt;
  }

  public void setCompletedAt(@javax.annotation.Nullable OffsetDateTime completedAt) {
    this.completedAt = completedAt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeploymentSummary deploymentSummary = (DeploymentSummary) o;
    return Objects.equals(this.deploymentNumber, deploymentSummary.deploymentNumber) &&
        Objects.equals(this.configurationName, deploymentSummary.configurationName) &&
        Objects.equals(this.configurationVersion, deploymentSummary.configurationVersion) &&
        Objects.equals(this.deploymentDurationInMinutes, deploymentSummary.deploymentDurationInMinutes) &&
        Objects.equals(this.growthType, deploymentSummary.growthType) &&
        Objects.equals(this.growthFactor, deploymentSummary.growthFactor) &&
        Objects.equals(this.finalBakeTimeInMinutes, deploymentSummary.finalBakeTimeInMinutes) &&
        Objects.equals(this.state, deploymentSummary.state) &&
        Objects.equals(this.percentageComplete, deploymentSummary.percentageComplete) &&
        Objects.equals(this.startedAt, deploymentSummary.startedAt) &&
        Objects.equals(this.completedAt, deploymentSummary.completedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deploymentNumber, configurationName, configurationVersion, deploymentDurationInMinutes, growthType, growthFactor, finalBakeTimeInMinutes, state, percentageComplete, startedAt, completedAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeploymentSummary {\n");
    sb.append("    deploymentNumber: ").append(toIndentedString(deploymentNumber)).append("\n");
    sb.append("    configurationName: ").append(toIndentedString(configurationName)).append("\n");
    sb.append("    configurationVersion: ").append(toIndentedString(configurationVersion)).append("\n");
    sb.append("    deploymentDurationInMinutes: ").append(toIndentedString(deploymentDurationInMinutes)).append("\n");
    sb.append("    growthType: ").append(toIndentedString(growthType)).append("\n");
    sb.append("    growthFactor: ").append(toIndentedString(growthFactor)).append("\n");
    sb.append("    finalBakeTimeInMinutes: ").append(toIndentedString(finalBakeTimeInMinutes)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    percentageComplete: ").append(toIndentedString(percentageComplete)).append("\n");
    sb.append("    startedAt: ").append(toIndentedString(startedAt)).append("\n");
    sb.append("    completedAt: ").append(toIndentedString(completedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DeploymentNumber");
    openapiFields.add("ConfigurationName");
    openapiFields.add("ConfigurationVersion");
    openapiFields.add("DeploymentDurationInMinutes");
    openapiFields.add("GrowthType");
    openapiFields.add("GrowthFactor");
    openapiFields.add("FinalBakeTimeInMinutes");
    openapiFields.add("State");
    openapiFields.add("PercentageComplete");
    openapiFields.add("StartedAt");
    openapiFields.add("CompletedAt");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DeploymentSummary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DeploymentSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DeploymentSummary is not found in the empty JSON string", DeploymentSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DeploymentSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DeploymentSummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `DeploymentNumber`
      if (jsonObj.get("DeploymentNumber") != null && !jsonObj.get("DeploymentNumber").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("DeploymentNumber"));
      }
      // validate the optional field `ConfigurationName`
      if (jsonObj.get("ConfigurationName") != null && !jsonObj.get("ConfigurationName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ConfigurationName"));
      }
      // validate the optional field `ConfigurationVersion`
      if (jsonObj.get("ConfigurationVersion") != null && !jsonObj.get("ConfigurationVersion").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ConfigurationVersion"));
      }
      // validate the optional field `DeploymentDurationInMinutes`
      if (jsonObj.get("DeploymentDurationInMinutes") != null && !jsonObj.get("DeploymentDurationInMinutes").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("DeploymentDurationInMinutes"));
      }
      // validate the optional field `GrowthType`
      if (jsonObj.get("GrowthType") != null && !jsonObj.get("GrowthType").isJsonNull()) {
        GrowthType.validateJsonElement(jsonObj.get("GrowthType"));
      }
      // validate the optional field `GrowthFactor`
      if (jsonObj.get("GrowthFactor") != null && !jsonObj.get("GrowthFactor").isJsonNull()) {
        Float.validateJsonElement(jsonObj.get("GrowthFactor"));
      }
      // validate the optional field `FinalBakeTimeInMinutes`
      if (jsonObj.get("FinalBakeTimeInMinutes") != null && !jsonObj.get("FinalBakeTimeInMinutes").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("FinalBakeTimeInMinutes"));
      }
      // validate the optional field `State`
      if (jsonObj.get("State") != null && !jsonObj.get("State").isJsonNull()) {
        DeploymentState.validateJsonElement(jsonObj.get("State"));
      }
      // validate the optional field `PercentageComplete`
      if (jsonObj.get("PercentageComplete") != null && !jsonObj.get("PercentageComplete").isJsonNull()) {
        Float.validateJsonElement(jsonObj.get("PercentageComplete"));
      }
      // validate the optional field `StartedAt`
      if (jsonObj.get("StartedAt") != null && !jsonObj.get("StartedAt").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("StartedAt"));
      }
      // validate the optional field `CompletedAt`
      if (jsonObj.get("CompletedAt") != null && !jsonObj.get("CompletedAt").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("CompletedAt"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DeploymentSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DeploymentSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DeploymentSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DeploymentSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<DeploymentSummary>() {
           @Override
           public void write(JsonWriter out, DeploymentSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DeploymentSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DeploymentSummary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DeploymentSummary
   * @throws IOException if the JSON string is invalid with respect to DeploymentSummary
   */
  public static DeploymentSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DeploymentSummary.class);
  }

  /**
   * Convert an instance of DeploymentSummary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

