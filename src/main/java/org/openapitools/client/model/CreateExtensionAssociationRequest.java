/*
 * Amazon AppConfig
 * <p>Use AppConfig, a capability of Amazon Web Services Systems Manager, to create, manage, and quickly deploy application configurations. AppConfig supports controlled deployments to applications of any size and includes built-in validation checks and monitoring. You can use AppConfig with applications hosted on Amazon EC2 instances, Lambda, containers, mobile applications, or IoT devices.</p> <p>To prevent errors when deploying application configurations, especially for production systems where a simple typo could cause an unexpected outage, AppConfig includes validators. A validator provides a syntactic or semantic check to ensure that the configuration you want to deploy works as intended. To validate your application configuration data, you provide a schema or an Amazon Web Services Lambda function that runs against the configuration. The configuration deployment or update can only proceed when the configuration data is valid.</p> <p>During a configuration deployment, AppConfig monitors the application to ensure that the deployment is successful. If the system encounters an error, AppConfig rolls back the change to minimize impact for your application users. You can configure a deployment strategy for each application or environment that includes deployment criteria, including velocity, bake time, and alarms to monitor. Similar to error monitoring, if a deployment triggers an alarm, AppConfig automatically rolls back to the previous version. </p> <p>AppConfig supports multiple use cases. Here are some examples:</p> <ul> <li> <p> <b>Feature flags</b>: Use AppConfig to turn on new features that require a timely deployment, such as a product launch or announcement. </p> </li> <li> <p> <b>Application tuning</b>: Use AppConfig to carefully introduce changes to your application that can only be tested with production traffic.</p> </li> <li> <p> <b>Allow list</b>: Use AppConfig to allow premium subscribers to access paid content. </p> </li> <li> <p> <b>Operational issues</b>: Use AppConfig to reduce stress on your application when a dependency or other external factor impacts the system.</p> </li> </ul> <p>This reference is intended to be used with the <a href=\"http://docs.aws.amazon.com/appconfig/latest/userguide/what-is-appconfig.html\">AppConfig User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2019-10-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateExtensionAssociationRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T13:42:19.346859+05:30[Asia/Kolkata]", comments = "Generator version: 7.10.0")
public class CreateExtensionAssociationRequest {
  public static final String SERIALIZED_NAME_EXTENSION_IDENTIFIER = "ExtensionIdentifier";
  @SerializedName(SERIALIZED_NAME_EXTENSION_IDENTIFIER)
  @javax.annotation.Nonnull
  private String extensionIdentifier;

  public static final String SERIALIZED_NAME_EXTENSION_VERSION_NUMBER = "ExtensionVersionNumber";
  @SerializedName(SERIALIZED_NAME_EXTENSION_VERSION_NUMBER)
  @javax.annotation.Nullable
  private Integer extensionVersionNumber;

  public static final String SERIALIZED_NAME_RESOURCE_IDENTIFIER = "ResourceIdentifier";
  @SerializedName(SERIALIZED_NAME_RESOURCE_IDENTIFIER)
  @javax.annotation.Nonnull
  private String resourceIdentifier;

  public static final String SERIALIZED_NAME_PARAMETERS = "Parameters";
  @SerializedName(SERIALIZED_NAME_PARAMETERS)
  @javax.annotation.Nullable
  private Map<String, String> parameters = new HashMap<>();

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  @javax.annotation.Nullable
  private Map<String, String> tags = new HashMap<>();

  public CreateExtensionAssociationRequest() {
  }

  public CreateExtensionAssociationRequest extensionIdentifier(@javax.annotation.Nonnull String extensionIdentifier) {
    this.extensionIdentifier = extensionIdentifier;
    return this;
  }

  /**
   * The name, the ID, or the Amazon Resource Name (ARN) of the extension.
   * @return extensionIdentifier
   */
  @javax.annotation.Nonnull
  public String getExtensionIdentifier() {
    return extensionIdentifier;
  }

  public void setExtensionIdentifier(@javax.annotation.Nonnull String extensionIdentifier) {
    this.extensionIdentifier = extensionIdentifier;
  }


  public CreateExtensionAssociationRequest extensionVersionNumber(@javax.annotation.Nullable Integer extensionVersionNumber) {
    this.extensionVersionNumber = extensionVersionNumber;
    return this;
  }

  /**
   * The version number of the extension. If not specified, AppConfig uses the maximum version of the extension.
   * @return extensionVersionNumber
   */
  @javax.annotation.Nullable
  public Integer getExtensionVersionNumber() {
    return extensionVersionNumber;
  }

  public void setExtensionVersionNumber(@javax.annotation.Nullable Integer extensionVersionNumber) {
    this.extensionVersionNumber = extensionVersionNumber;
  }


  public CreateExtensionAssociationRequest resourceIdentifier(@javax.annotation.Nonnull String resourceIdentifier) {
    this.resourceIdentifier = resourceIdentifier;
    return this;
  }

  /**
   * The ARN of an application, configuration profile, or environment.
   * @return resourceIdentifier
   */
  @javax.annotation.Nonnull
  public String getResourceIdentifier() {
    return resourceIdentifier;
  }

  public void setResourceIdentifier(@javax.annotation.Nonnull String resourceIdentifier) {
    this.resourceIdentifier = resourceIdentifier;
  }


  public CreateExtensionAssociationRequest parameters(@javax.annotation.Nullable Map<String, String> parameters) {
    this.parameters = parameters;
    return this;
  }

  public CreateExtensionAssociationRequest putParametersItem(String key, String parametersItem) {
    if (this.parameters == null) {
      this.parameters = new HashMap<>();
    }
    this.parameters.put(key, parametersItem);
    return this;
  }

  /**
   * The parameter names and values defined in the extensions. Extension parameters marked &lt;code&gt;Required&lt;/code&gt; must be entered for this field.
   * @return parameters
   */
  @javax.annotation.Nullable
  public Map<String, String> getParameters() {
    return parameters;
  }

  public void setParameters(@javax.annotation.Nullable Map<String, String> parameters) {
    this.parameters = parameters;
  }


  public CreateExtensionAssociationRequest tags(@javax.annotation.Nullable Map<String, String> tags) {
    this.tags = tags;
    return this;
  }

  public CreateExtensionAssociationRequest putTagsItem(String key, String tagsItem) {
    if (this.tags == null) {
      this.tags = new HashMap<>();
    }
    this.tags.put(key, tagsItem);
    return this;
  }

  /**
   * Adds one or more tags for the specified extension association. Tags are metadata that help you categorize resources in different ways, for example, by purpose, owner, or environment. Each tag consists of a key and an optional value, both of which you define. 
   * @return tags
   */
  @javax.annotation.Nullable
  public Map<String, String> getTags() {
    return tags;
  }

  public void setTags(@javax.annotation.Nullable Map<String, String> tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateExtensionAssociationRequest createExtensionAssociationRequest = (CreateExtensionAssociationRequest) o;
    return Objects.equals(this.extensionIdentifier, createExtensionAssociationRequest.extensionIdentifier) &&
        Objects.equals(this.extensionVersionNumber, createExtensionAssociationRequest.extensionVersionNumber) &&
        Objects.equals(this.resourceIdentifier, createExtensionAssociationRequest.resourceIdentifier) &&
        Objects.equals(this.parameters, createExtensionAssociationRequest.parameters) &&
        Objects.equals(this.tags, createExtensionAssociationRequest.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(extensionIdentifier, extensionVersionNumber, resourceIdentifier, parameters, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateExtensionAssociationRequest {\n");
    sb.append("    extensionIdentifier: ").append(toIndentedString(extensionIdentifier)).append("\n");
    sb.append("    extensionVersionNumber: ").append(toIndentedString(extensionVersionNumber)).append("\n");
    sb.append("    resourceIdentifier: ").append(toIndentedString(resourceIdentifier)).append("\n");
    sb.append("    parameters: ").append(toIndentedString(parameters)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ExtensionIdentifier");
    openapiFields.add("ExtensionVersionNumber");
    openapiFields.add("ResourceIdentifier");
    openapiFields.add("Parameters");
    openapiFields.add("Tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ExtensionIdentifier");
    openapiRequiredFields.add("ResourceIdentifier");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateExtensionAssociationRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateExtensionAssociationRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateExtensionAssociationRequest is not found in the empty JSON string", CreateExtensionAssociationRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateExtensionAssociationRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateExtensionAssociationRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateExtensionAssociationRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("ExtensionIdentifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ExtensionIdentifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ExtensionIdentifier").toString()));
      }
      if (!jsonObj.get("ResourceIdentifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ResourceIdentifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ResourceIdentifier").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateExtensionAssociationRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateExtensionAssociationRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateExtensionAssociationRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateExtensionAssociationRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateExtensionAssociationRequest>() {
           @Override
           public void write(JsonWriter out, CreateExtensionAssociationRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateExtensionAssociationRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateExtensionAssociationRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateExtensionAssociationRequest
   * @throws IOException if the JSON string is invalid with respect to CreateExtensionAssociationRequest
   */
  public static CreateExtensionAssociationRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateExtensionAssociationRequest.class);
  }

  /**
   * Convert an instance of CreateExtensionAssociationRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

