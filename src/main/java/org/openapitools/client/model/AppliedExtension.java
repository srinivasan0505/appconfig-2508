/*
 * Amazon AppConfig
 * <p>Use AppConfig, a capability of Amazon Web Services Systems Manager, to create, manage, and quickly deploy application configurations. AppConfig supports controlled deployments to applications of any size and includes built-in validation checks and monitoring. You can use AppConfig with applications hosted on Amazon EC2 instances, Lambda, containers, mobile applications, or IoT devices.</p> <p>To prevent errors when deploying application configurations, especially for production systems where a simple typo could cause an unexpected outage, AppConfig includes validators. A validator provides a syntactic or semantic check to ensure that the configuration you want to deploy works as intended. To validate your application configuration data, you provide a schema or an Amazon Web Services Lambda function that runs against the configuration. The configuration deployment or update can only proceed when the configuration data is valid.</p> <p>During a configuration deployment, AppConfig monitors the application to ensure that the deployment is successful. If the system encounters an error, AppConfig rolls back the change to minimize impact for your application users. You can configure a deployment strategy for each application or environment that includes deployment criteria, including velocity, bake time, and alarms to monitor. Similar to error monitoring, if a deployment triggers an alarm, AppConfig automatically rolls back to the previous version. </p> <p>AppConfig supports multiple use cases. Here are some examples:</p> <ul> <li> <p> <b>Feature flags</b>: Use AppConfig to turn on new features that require a timely deployment, such as a product launch or announcement. </p> </li> <li> <p> <b>Application tuning</b>: Use AppConfig to carefully introduce changes to your application that can only be tested with production traffic.</p> </li> <li> <p> <b>Allow list</b>: Use AppConfig to allow premium subscribers to access paid content. </p> </li> <li> <p> <b>Operational issues</b>: Use AppConfig to reduce stress on your application when a dependency or other external factor impacts the system.</p> </li> </ul> <p>This reference is intended to be used with the <a href=\"http://docs.aws.amazon.com/appconfig/latest/userguide/what-is-appconfig.html\">AppConfig User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2019-10-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An extension that was invoked during a deployment.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T13:42:19.346859+05:30[Asia/Kolkata]", comments = "Generator version: 7.10.0")
public class AppliedExtension {
  public static final String SERIALIZED_NAME_EXTENSION_ID = "ExtensionId";
  @SerializedName(SERIALIZED_NAME_EXTENSION_ID)
  @javax.annotation.Nullable
  private String extensionId;

  public static final String SERIALIZED_NAME_EXTENSION_ASSOCIATION_ID = "ExtensionAssociationId";
  @SerializedName(SERIALIZED_NAME_EXTENSION_ASSOCIATION_ID)
  @javax.annotation.Nullable
  private String extensionAssociationId;

  public static final String SERIALIZED_NAME_VERSION_NUMBER = "VersionNumber";
  @SerializedName(SERIALIZED_NAME_VERSION_NUMBER)
  @javax.annotation.Nullable
  private Integer versionNumber;

  public static final String SERIALIZED_NAME_PARAMETERS = "Parameters";
  @SerializedName(SERIALIZED_NAME_PARAMETERS)
  @javax.annotation.Nullable
  private Map parameters;

  public AppliedExtension() {
  }

  public AppliedExtension extensionId(@javax.annotation.Nullable String extensionId) {
    this.extensionId = extensionId;
    return this;
  }

  /**
   * Get extensionId
   * @return extensionId
   */
  @javax.annotation.Nullable
  public String getExtensionId() {
    return extensionId;
  }

  public void setExtensionId(@javax.annotation.Nullable String extensionId) {
    this.extensionId = extensionId;
  }


  public AppliedExtension extensionAssociationId(@javax.annotation.Nullable String extensionAssociationId) {
    this.extensionAssociationId = extensionAssociationId;
    return this;
  }

  /**
   * Get extensionAssociationId
   * @return extensionAssociationId
   */
  @javax.annotation.Nullable
  public String getExtensionAssociationId() {
    return extensionAssociationId;
  }

  public void setExtensionAssociationId(@javax.annotation.Nullable String extensionAssociationId) {
    this.extensionAssociationId = extensionAssociationId;
  }


  public AppliedExtension versionNumber(@javax.annotation.Nullable Integer versionNumber) {
    this.versionNumber = versionNumber;
    return this;
  }

  /**
   * Get versionNumber
   * @return versionNumber
   */
  @javax.annotation.Nullable
  public Integer getVersionNumber() {
    return versionNumber;
  }

  public void setVersionNumber(@javax.annotation.Nullable Integer versionNumber) {
    this.versionNumber = versionNumber;
  }


  public AppliedExtension parameters(@javax.annotation.Nullable Map parameters) {
    this.parameters = parameters;
    return this;
  }

  /**
   * Get parameters
   * @return parameters
   */
  @javax.annotation.Nullable
  public Map getParameters() {
    return parameters;
  }

  public void setParameters(@javax.annotation.Nullable Map parameters) {
    this.parameters = parameters;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AppliedExtension appliedExtension = (AppliedExtension) o;
    return Objects.equals(this.extensionId, appliedExtension.extensionId) &&
        Objects.equals(this.extensionAssociationId, appliedExtension.extensionAssociationId) &&
        Objects.equals(this.versionNumber, appliedExtension.versionNumber) &&
        Objects.equals(this.parameters, appliedExtension.parameters);
  }

  @Override
  public int hashCode() {
    return Objects.hash(extensionId, extensionAssociationId, versionNumber, parameters);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AppliedExtension {\n");
    sb.append("    extensionId: ").append(toIndentedString(extensionId)).append("\n");
    sb.append("    extensionAssociationId: ").append(toIndentedString(extensionAssociationId)).append("\n");
    sb.append("    versionNumber: ").append(toIndentedString(versionNumber)).append("\n");
    sb.append("    parameters: ").append(toIndentedString(parameters)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ExtensionId");
    openapiFields.add("ExtensionAssociationId");
    openapiFields.add("VersionNumber");
    openapiFields.add("Parameters");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AppliedExtension
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AppliedExtension.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AppliedExtension is not found in the empty JSON string", AppliedExtension.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AppliedExtension.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AppliedExtension` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ExtensionId`
      if (jsonObj.get("ExtensionId") != null && !jsonObj.get("ExtensionId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ExtensionId"));
      }
      // validate the optional field `ExtensionAssociationId`
      if (jsonObj.get("ExtensionAssociationId") != null && !jsonObj.get("ExtensionAssociationId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ExtensionAssociationId"));
      }
      // validate the optional field `VersionNumber`
      if (jsonObj.get("VersionNumber") != null && !jsonObj.get("VersionNumber").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("VersionNumber"));
      }
      // validate the optional field `Parameters`
      if (jsonObj.get("Parameters") != null && !jsonObj.get("Parameters").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("Parameters"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AppliedExtension.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AppliedExtension' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AppliedExtension> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AppliedExtension.class));

       return (TypeAdapter<T>) new TypeAdapter<AppliedExtension>() {
           @Override
           public void write(JsonWriter out, AppliedExtension value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AppliedExtension read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AppliedExtension given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AppliedExtension
   * @throws IOException if the JSON string is invalid with respect to AppliedExtension
   */
  public static AppliedExtension fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AppliedExtension.class);
  }

  /**
   * Convert an instance of AppliedExtension to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

