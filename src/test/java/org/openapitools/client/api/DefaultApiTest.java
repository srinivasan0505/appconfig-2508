/*
 * Amazon AppConfig
 * <p>Use AppConfig, a capability of Amazon Web Services Systems Manager, to create, manage, and quickly deploy application configurations. AppConfig supports controlled deployments to applications of any size and includes built-in validation checks and monitoring. You can use AppConfig with applications hosted on Amazon EC2 instances, Lambda, containers, mobile applications, or IoT devices.</p> <p>To prevent errors when deploying application configurations, especially for production systems where a simple typo could cause an unexpected outage, AppConfig includes validators. A validator provides a syntactic or semantic check to ensure that the configuration you want to deploy works as intended. To validate your application configuration data, you provide a schema or an Amazon Web Services Lambda function that runs against the configuration. The configuration deployment or update can only proceed when the configuration data is valid.</p> <p>During a configuration deployment, AppConfig monitors the application to ensure that the deployment is successful. If the system encounters an error, AppConfig rolls back the change to minimize impact for your application users. You can configure a deployment strategy for each application or environment that includes deployment criteria, including velocity, bake time, and alarms to monitor. Similar to error monitoring, if a deployment triggers an alarm, AppConfig automatically rolls back to the previous version. </p> <p>AppConfig supports multiple use cases. Here are some examples:</p> <ul> <li> <p> <b>Feature flags</b>: Use AppConfig to turn on new features that require a timely deployment, such as a product launch or announcement. </p> </li> <li> <p> <b>Application tuning</b>: Use AppConfig to carefully introduce changes to your application that can only be tested with production traffic.</p> </li> <li> <p> <b>Allow list</b>: Use AppConfig to allow premium subscribers to access paid content. </p> </li> <li> <p> <b>Operational issues</b>: Use AppConfig to reduce stress on your application when a dependency or other external factor impacts the system.</p> </li> </ul> <p>This reference is intended to be used with the <a href=\"http://docs.aws.amazon.com/appconfig/latest/userguide/what-is-appconfig.html\">AppConfig User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2019-10-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Application;
import org.openapitools.client.model.Applications;
import org.openapitools.client.model.ConfigurationProfile;
import org.openapitools.client.model.ConfigurationProfiles;
import org.openapitools.client.model.CreateApplicationRequest;
import org.openapitools.client.model.CreateConfigurationProfileRequest;
import org.openapitools.client.model.CreateDeploymentStrategyRequest;
import org.openapitools.client.model.CreateEnvironmentRequest;
import org.openapitools.client.model.CreateExtensionAssociationRequest;
import org.openapitools.client.model.CreateExtensionRequest;
import org.openapitools.client.model.CreateHostedConfigurationVersionRequest;
import org.openapitools.client.model.Deployment;
import org.openapitools.client.model.DeploymentStrategies;
import org.openapitools.client.model.DeploymentStrategy;
import org.openapitools.client.model.Deployments;
import org.openapitools.client.model.Environment;
import org.openapitools.client.model.Environments;
import org.openapitools.client.model.Extension;
import org.openapitools.client.model.ExtensionAssociation;
import org.openapitools.client.model.ExtensionAssociations;
import org.openapitools.client.model.Extensions;
import org.openapitools.client.model.HostedConfigurationVersion;
import org.openapitools.client.model.HostedConfigurationVersions;
import org.openapitools.client.model.ModelConfiguration;
import org.openapitools.client.model.ResourceTags;
import org.openapitools.client.model.StartDeploymentRequest;
import org.openapitools.client.model.TagResourceRequest;
import org.openapitools.client.model.UpdateApplicationRequest;
import org.openapitools.client.model.UpdateConfigurationProfileRequest;
import org.openapitools.client.model.UpdateDeploymentStrategyRequest;
import org.openapitools.client.model.UpdateEnvironmentRequest;
import org.openapitools.client.model.UpdateExtensionAssociationRequest;
import org.openapitools.client.model.UpdateExtensionRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Creates an application. In AppConfig, an application is simply an organizational construct like a folder. This organizational construct has a relationship with some unit of executable code. For example, you could create an application called MyMobileApp to organize and manage configuration data for a mobile application installed by your users.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createApplicationTest() throws ApiException {
        CreateApplicationRequest createApplicationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Application response = api.createApplication(createApplicationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a configuration profile, which is information that enables AppConfig to access the configuration source. Valid configuration sources include the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Configuration data in YAML, JSON, and other formats stored in the AppConfig hosted configuration store&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Configuration data stored as objects in an Amazon Simple Storage Service (Amazon S3) bucket&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Pipelines stored in CodePipeline&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Secrets stored in Secrets Manager&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Standard and secure string parameters stored in Amazon Web Services Systems Manager Parameter Store&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Configuration data in SSM documents stored in the Systems Manager document store&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;A configuration profile includes the following information:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The URI location of the configuration data.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The Identity and Access Management (IAM) role that provides access to the configuration data.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A validator for the configuration data. Available validators include either a JSON Schema or an Amazon Web Services Lambda function.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/appconfig/latest/userguide/appconfig-creating-configuration-and-profile.html\&quot;&gt;Create a Configuration and a Configuration Profile&lt;/a&gt; in the &lt;i&gt;AppConfig User Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createConfigurationProfileTest() throws ApiException {
        String applicationId = null;
        CreateConfigurationProfileRequest createConfigurationProfileRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ConfigurationProfile response = api.createConfigurationProfile(applicationId, createConfigurationProfileRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a deployment strategy that defines important criteria for rolling out your configuration to the designated targets. A deployment strategy includes the overall duration required, a percentage of targets to receive the deployment during each interval, an algorithm that defines how percentage grows, and bake time.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createDeploymentStrategyTest() throws ApiException {
        CreateDeploymentStrategyRequest createDeploymentStrategyRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeploymentStrategy response = api.createDeploymentStrategy(createDeploymentStrategyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates an environment. For each application, you define one or more environments. An environment is a deployment group of AppConfig targets, such as applications in a &lt;code&gt;Beta&lt;/code&gt; or &lt;code&gt;Production&lt;/code&gt; environment. You can also define environments for application subcomponents such as the &lt;code&gt;Web&lt;/code&gt;, &lt;code&gt;Mobile&lt;/code&gt; and &lt;code&gt;Back-end&lt;/code&gt; components for your application. You can configure Amazon CloudWatch alarms for each environment. The system monitors alarms during a configuration deployment. If an alarm is triggered, the system rolls back the configuration.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createEnvironmentTest() throws ApiException {
        String applicationId = null;
        CreateEnvironmentRequest createEnvironmentRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Environment response = api.createEnvironment(applicationId, createEnvironmentRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates an AppConfig extension. An extension augments your ability to inject logic or behavior at different points during the AppConfig workflow of creating or deploying a configuration.&lt;/p&gt; &lt;p&gt;You can create your own extensions or use the Amazon Web Services authored extensions provided by AppConfig. For most use cases, to create your own extension, you must create an Lambda function to perform any computation and processing defined in the extension. For more information about extensions, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/appconfig/latest/userguide/working-with-appconfig-extensions.html\&quot;&gt;Working with AppConfig extensions&lt;/a&gt; in the &lt;i&gt;AppConfig User Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createExtensionTest() throws ApiException {
        CreateExtensionRequest createExtensionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer latestVersionNumber = null;
        Extension response = api.createExtension(createExtensionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, latestVersionNumber);
        // TODO: test validations
    }

    /**
     * When you create an extension or configure an Amazon Web Services authored extension, you associate the extension with an AppConfig application, environment, or configuration profile. For example, you can choose to run the &lt;code&gt;AppConfig deployment events to Amazon SNS&lt;/code&gt; Amazon Web Services authored extension and receive notifications on an Amazon SNS topic anytime a configuration deployment is started for a specific application. Defining which extension to associate with an AppConfig resource is called an &lt;i&gt;extension association&lt;/i&gt;. An extension association is a specified relationship between an extension and an AppConfig resource, such as an application or a configuration profile. For more information about extensions and associations, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/appconfig/latest/userguide/working-with-appconfig-extensions.html\&quot;&gt;Working with AppConfig extensions&lt;/a&gt; in the &lt;i&gt;AppConfig User Guide&lt;/i&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createExtensionAssociationTest() throws ApiException {
        CreateExtensionAssociationRequest createExtensionAssociationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ExtensionAssociation response = api.createExtensionAssociation(createExtensionAssociationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a new configuration in the AppConfig hosted configuration store.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createHostedConfigurationVersionTest() throws ApiException {
        String applicationId = null;
        String configurationProfileId = null;
        String contentType = null;
        CreateHostedConfigurationVersionRequest createHostedConfigurationVersionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String description = null;
        Integer latestVersionNumber = null;
        String versionLabel = null;
        HostedConfigurationVersion response = api.createHostedConfigurationVersion(applicationId, configurationProfileId, contentType, createHostedConfigurationVersionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, description, latestVersionNumber, versionLabel);
        // TODO: test validations
    }

    /**
     * Deletes an application. Deleting an application does not delete a configuration from a host.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteApplicationTest() throws ApiException {
        String applicationId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteApplication(applicationId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a configuration profile. Deleting a configuration profile does not delete a configuration from a host.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteConfigurationProfileTest() throws ApiException {
        String applicationId = null;
        String configurationProfileId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteConfigurationProfile(applicationId, configurationProfileId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a deployment strategy. Deleting a deployment strategy does not delete a configuration from a host.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteDeploymentStrategyTest() throws ApiException {
        String deploymentStrategyId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteDeploymentStrategy(deploymentStrategyId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes an environment. Deleting an environment does not delete a configuration from a host.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteEnvironmentTest() throws ApiException {
        String applicationId = null;
        String environmentId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteEnvironment(applicationId, environmentId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes an AppConfig extension. You must delete all associations to an extension before you delete the extension.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteExtensionTest() throws ApiException {
        String extensionIdentifier = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer version = null;
        api.deleteExtension(extensionIdentifier, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, version);
        // TODO: test validations
    }

    /**
     * Deletes an extension association. This action doesn&#39;t delete extensions defined in the association.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteExtensionAssociationTest() throws ApiException {
        String extensionAssociationId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteExtensionAssociation(extensionAssociationId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a version of a configuration from the AppConfig hosted configuration store.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteHostedConfigurationVersionTest() throws ApiException {
        String applicationId = null;
        String configurationProfileId = null;
        Integer versionNumber = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteHostedConfigurationVersion(applicationId, configurationProfileId, versionNumber, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves information about an application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getApplicationTest() throws ApiException {
        String applicationId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Application response = api.getApplication(applicationId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;(Deprecated) Retrieves the latest deployed configuration.&lt;/p&gt; &lt;important&gt; &lt;p&gt;Note the following important information.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;This API action is deprecated. Calls to receive configuration data should use the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/appconfig/2019-10-09/APIReference/API_appconfigdata_StartConfigurationSession.html\&quot;&gt;StartConfigurationSession&lt;/a&gt; and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/appconfig/2019-10-09/APIReference/API_appconfigdata_GetLatestConfiguration.html\&quot;&gt;GetLatestConfiguration&lt;/a&gt; APIs instead. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;GetConfiguration&lt;/code&gt; is a priced call. For more information, see &lt;a href&#x3D;\&quot;https://aws.amazon.com/systems-manager/pricing/\&quot;&gt;Pricing&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/important&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getConfigurationTest() throws ApiException {
        String application = null;
        String environment = null;
        String _configuration = null;
        String clientId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String clientConfigurationVersion = null;
        ModelConfiguration response = api.getConfiguration(application, environment, _configuration, clientId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, clientConfigurationVersion);
        // TODO: test validations
    }

    /**
     * Retrieves information about a configuration profile.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getConfigurationProfileTest() throws ApiException {
        String applicationId = null;
        String configurationProfileId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ConfigurationProfile response = api.getConfigurationProfile(applicationId, configurationProfileId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves information about a configuration deployment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeploymentTest() throws ApiException {
        String applicationId = null;
        String environmentId = null;
        Integer deploymentNumber = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Deployment response = api.getDeployment(applicationId, environmentId, deploymentNumber, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves information about a deployment strategy. A deployment strategy defines important criteria for rolling out your configuration to the designated targets. A deployment strategy includes the overall duration required, a percentage of targets to receive the deployment during each interval, an algorithm that defines how percentage grows, and bake time.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeploymentStrategyTest() throws ApiException {
        String deploymentStrategyId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeploymentStrategy response = api.getDeploymentStrategy(deploymentStrategyId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves information about an environment. An environment is a deployment group of AppConfig applications, such as applications in a &lt;code&gt;Production&lt;/code&gt; environment or in an &lt;code&gt;EU_Region&lt;/code&gt; environment. Each configuration deployment targets an environment. You can enable one or more Amazon CloudWatch alarms for an environment. If an alarm is triggered during a deployment, AppConfig roles back the configuration.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEnvironmentTest() throws ApiException {
        String applicationId = null;
        String environmentId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Environment response = api.getEnvironment(applicationId, environmentId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns information about an AppConfig extension.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getExtensionTest() throws ApiException {
        String extensionIdentifier = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer versionNumber = null;
        Extension response = api.getExtension(extensionIdentifier, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, versionNumber);
        // TODO: test validations
    }

    /**
     * Returns information about an AppConfig extension association. For more information about extensions and associations, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/appconfig/latest/userguide/working-with-appconfig-extensions.html\&quot;&gt;Working with AppConfig extensions&lt;/a&gt; in the &lt;i&gt;AppConfig User Guide&lt;/i&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getExtensionAssociationTest() throws ApiException {
        String extensionAssociationId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ExtensionAssociation response = api.getExtensionAssociation(extensionAssociationId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves information about a specific configuration version.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getHostedConfigurationVersionTest() throws ApiException {
        String applicationId = null;
        String configurationProfileId = null;
        Integer versionNumber = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        HostedConfigurationVersion response = api.getHostedConfigurationVersion(applicationId, configurationProfileId, versionNumber, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Lists all applications in your Amazon Web Services account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listApplicationsTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        String maxResults2 = null;
        String nextToken2 = null;
        Applications response = api.listApplications(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, maxResults2, nextToken2);
        // TODO: test validations
    }

    /**
     * Lists the configuration profiles for an application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listConfigurationProfilesTest() throws ApiException {
        String applicationId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        String type = null;
        String maxResults2 = null;
        String nextToken2 = null;
        ConfigurationProfiles response = api.listConfigurationProfiles(applicationId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, type, maxResults2, nextToken2);
        // TODO: test validations
    }

    /**
     * Lists deployment strategies.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listDeploymentStrategiesTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        String maxResults2 = null;
        String nextToken2 = null;
        DeploymentStrategies response = api.listDeploymentStrategies(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, maxResults2, nextToken2);
        // TODO: test validations
    }

    /**
     * Lists the deployments for an environment in descending deployment number order.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listDeploymentsTest() throws ApiException {
        String applicationId = null;
        String environmentId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        String maxResults2 = null;
        String nextToken2 = null;
        Deployments response = api.listDeployments(applicationId, environmentId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, maxResults2, nextToken2);
        // TODO: test validations
    }

    /**
     * Lists the environments for an application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listEnvironmentsTest() throws ApiException {
        String applicationId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        String maxResults2 = null;
        String nextToken2 = null;
        Environments response = api.listEnvironments(applicationId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, maxResults2, nextToken2);
        // TODO: test validations
    }

    /**
     * Lists all AppConfig extension associations in the account. For more information about extensions and associations, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/appconfig/latest/userguide/working-with-appconfig-extensions.html\&quot;&gt;Working with AppConfig extensions&lt;/a&gt; in the &lt;i&gt;AppConfig User Guide&lt;/i&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listExtensionAssociationsTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String resourceIdentifier = null;
        String extensionIdentifier = null;
        Integer extensionVersionNumber = null;
        Integer maxResults = null;
        String nextToken = null;
        String maxResults2 = null;
        String nextToken2 = null;
        ExtensionAssociations response = api.listExtensionAssociations(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, resourceIdentifier, extensionIdentifier, extensionVersionNumber, maxResults, nextToken, maxResults2, nextToken2);
        // TODO: test validations
    }

    /**
     * Lists all custom and Amazon Web Services authored AppConfig extensions in the account. For more information about extensions, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/appconfig/latest/userguide/working-with-appconfig-extensions.html\&quot;&gt;Working with AppConfig extensions&lt;/a&gt; in the &lt;i&gt;AppConfig User Guide&lt;/i&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listExtensionsTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        String name = null;
        String maxResults2 = null;
        String nextToken2 = null;
        Extensions response = api.listExtensions(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, name, maxResults2, nextToken2);
        // TODO: test validations
    }

    /**
     * Lists configurations stored in the AppConfig hosted configuration store by version.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listHostedConfigurationVersionsTest() throws ApiException {
        String applicationId = null;
        String configurationProfileId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        String versionLabel = null;
        String maxResults2 = null;
        String nextToken2 = null;
        HostedConfigurationVersions response = api.listHostedConfigurationVersions(applicationId, configurationProfileId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, versionLabel, maxResults2, nextToken2);
        // TODO: test validations
    }

    /**
     * Retrieves the list of key-value tags assigned to the resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTagsForResourceTest() throws ApiException {
        String resourceArn = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ResourceTags response = api.listTagsForResource(resourceArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Starts a deployment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startDeploymentTest() throws ApiException {
        String applicationId = null;
        String environmentId = null;
        StartDeploymentRequest startDeploymentRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Deployment response = api.startDeployment(applicationId, environmentId, startDeploymentRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Stops a deployment. This API action works only on deployments that have a status of &lt;code&gt;DEPLOYING&lt;/code&gt;. This action moves the deployment to a status of &lt;code&gt;ROLLED_BACK&lt;/code&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stopDeploymentTest() throws ApiException {
        String applicationId = null;
        String environmentId = null;
        Integer deploymentNumber = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Deployment response = api.stopDeployment(applicationId, environmentId, deploymentNumber, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Assigns metadata to an AppConfig resource. Tags help organize and categorize your AppConfig resources. Each tag consists of a key and an optional value, both of which you define. You can specify a maximum of 50 tags for a resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagResourceTest() throws ApiException {
        String resourceArn = null;
        TagResourceRequest tagResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.tagResource(resourceArn, tagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a tag key and value from an AppConfig resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void untagResourceTest() throws ApiException {
        String resourceArn = null;
        List<String> tagKeys = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.untagResource(resourceArn, tagKeys, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates an application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateApplicationTest() throws ApiException {
        String applicationId = null;
        UpdateApplicationRequest updateApplicationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Application response = api.updateApplication(applicationId, updateApplicationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates a configuration profile.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateConfigurationProfileTest() throws ApiException {
        String applicationId = null;
        String configurationProfileId = null;
        UpdateConfigurationProfileRequest updateConfigurationProfileRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ConfigurationProfile response = api.updateConfigurationProfile(applicationId, configurationProfileId, updateConfigurationProfileRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates a deployment strategy.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDeploymentStrategyTest() throws ApiException {
        String deploymentStrategyId = null;
        UpdateDeploymentStrategyRequest updateDeploymentStrategyRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeploymentStrategy response = api.updateDeploymentStrategy(deploymentStrategyId, updateDeploymentStrategyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates an environment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateEnvironmentTest() throws ApiException {
        String applicationId = null;
        String environmentId = null;
        UpdateEnvironmentRequest updateEnvironmentRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Environment response = api.updateEnvironment(applicationId, environmentId, updateEnvironmentRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates an AppConfig extension. For more information about extensions, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/appconfig/latest/userguide/working-with-appconfig-extensions.html\&quot;&gt;Working with AppConfig extensions&lt;/a&gt; in the &lt;i&gt;AppConfig User Guide&lt;/i&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateExtensionTest() throws ApiException {
        String extensionIdentifier = null;
        UpdateExtensionRequest updateExtensionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Extension response = api.updateExtension(extensionIdentifier, updateExtensionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates an association. For more information about extensions and associations, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/appconfig/latest/userguide/working-with-appconfig-extensions.html\&quot;&gt;Working with AppConfig extensions&lt;/a&gt; in the &lt;i&gt;AppConfig User Guide&lt;/i&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateExtensionAssociationTest() throws ApiException {
        String extensionAssociationId = null;
        UpdateExtensionAssociationRequest updateExtensionAssociationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ExtensionAssociation response = api.updateExtensionAssociation(extensionAssociationId, updateExtensionAssociationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Uses the validators in a configuration profile to validate a configuration.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void validateConfigurationTest() throws ApiException {
        String applicationId = null;
        String configurationProfileId = null;
        String configurationVersion = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.validateConfiguration(applicationId, configurationProfileId, configurationVersion, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

}
